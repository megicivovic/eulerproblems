package problem_29;

import java.math.BigInteger;
import java.util.TreeMap;

/**
 * @author Wolfgang
 * @note How many distinct terms are in the sequence generated by a^(b) for 2 <= a <= 100 and 2 <= b <= 100?
 */
public class Problem29 {

	TreeMap<BigInteger, Boolean> _storage;
	
	public Problem29()
	{
		_storage = new TreeMap<BigInteger, Boolean>();
	}
	
	/**
	 * @param upper upper limit of the number generation a^b
	 * @return the distinct count of all generated numbers
	 */
	public int getDistinctCount(int upper) {
		// clear previously calculated result sets
		_storage.clear();
		// iterate through all possibilities of a^b with a and b between 2 and upper
		for (int a = 2; a <= upper; ++a)
		{
			// init bigint value of a here since it is not changed in the b loop 
			BigInteger ba = BigInteger.valueOf(a);
			for (int b = 2; b <= upper; ++b)
			{
				// a^b
				BigInteger result = ba.pow(b);
				// store the resulting integer
				_storage.put(result, true);
			}
		}
		
		// since TreeMap takes care of the multiple entries by itself we only need to return the size of the map
		return _storage.size();
	}
}
